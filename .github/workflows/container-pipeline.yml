name: Java CI Pipeline (Containerized)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  java-ci:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.repository }}

    steps:
      # Stage 1: Checkout code (required for later volumes)
      - name: Checkout code
        uses: actions/checkout@v3

      # Stage 2: Scan (inside Sonar Scanner container)
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
             SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
            args: >
             -Dsonar.projectKey=${{ github.repository }}
             -Dsonar.organization=${{ github.repository }}
             -Dsonar.sources=.





      # Stage 3: Build Java App with Maven
      - name: Build with Maven
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            maven:3.9.4-eclipse-temurin-17 \
            mvn clean package

      # Stage 4: Build Docker Image
      - name: Build Docker Image
        run: |
          echo -e "FROM eclipse-temurin:17\nCOPY target/*.jar /app.jar\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]" > Dockerfile
          docker build -t $IMAGE_NAME:latest .

      # Stage 5: Push Docker Image to DockerHub
      - name: Push Docker Image
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push $IMAGE_NAME:latest
