name: Java CI Pipeline (Containerized)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  java-ci:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/samplejavaapplication    #${{ github.repository }}

    steps:
      # Stage 1: Checkout code (required for later volumes)
      - name: Checkout code
        uses: actions/checkout@v3

      # Stage 2: Scan (inside Sonar Scanner container)
      - name: SonarQube Scan using Docker
        run: |
            mvn clean verify sonar:sonar -Dsonar.projectKey=${{ vars.PROJECT_KEY.PROJECT_KEY }} -Dsonar.projectName='${{ vars.PROJECT_KEY.PROJECT_NAME }} -Dsonar.host.url=http://13.233.71.33:9000 -Dsonar.token=${{ secrets.PROJECT_KEY.SONAR_TOKEN }}

      # Stage 3: Build Java App with Maven
      - name: Build with Maven
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            maven:3.9.4-eclipse-temurin-17 \
            mvn clean package

      # Stage 4: Build Docker Image
      - name: Build Docker Image
        run: |
          echo -e "FROM eclipse-temurin:17\nCOPY target/*.jar /app.jar\nENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]" > Dockerfile
          docker build -t $IMAGE_NAME:latest .

      # Stage 5: Push Docker Image to DockerHub
      - name: Tag and Push Docker Image
        #env:
        # IMAGE_NAME: samplejavaproject
        run: |
             echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
             #docker tag $IMAGE_NAME:latest ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest
             #docker push ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest
             docker push $IMAGE_NAME:latest
